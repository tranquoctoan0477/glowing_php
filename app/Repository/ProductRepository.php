<?php

// ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n ch√≠nh x√°c ƒë·∫øn config.php
require_once __DIR__ . '/../../config/config.php';


class ProductRepository
{
    // Ph∆∞∆°ng th·ª©c l·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m
    public function getAllProducts()
    {
        $query = "SELECT p.ID, p.Name, p.Description, p.BasePrice, p.CategoryID, pv.VariantName, pv.VariantPrice, p.ThumbnailImage , pv.StockQuantity
                  FROM products p
                  LEFT JOIN product_variants pv ON p.ID = pv.ProductID";

        global $pdo;
        $stmt = $pdo->query($query);

        // Ki·ªÉm tra n·∫øu c√≥ d·ªØ li·ªáu
        if ($stmt->rowCount() > 0) {
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } else {
            return [];  // Tr·∫£ v·ªÅ m·∫£ng r·ªóng n·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m
        }
    }

    // H√†m l·∫•y 7 s·∫£n ph·∫©m c√≥ s·ªë l∆∞·ª£t b√°n cao nh·∫•t
    public function getTopSellingProducts($limit = 7)
    {
        global $pdo;
        // Chu·∫©n b·ªã c√¢u truy v·∫•n SQL ƒë·ªÉ l·∫•y c√°c s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t
        $query = "SELECT p.ID, p.Name, p.BasePrice, pv.VariantName, pv.VariantPrice, p.ThumbnailImage, pv.SalesCount
                  FROM products p
                  JOIN product_variants pv ON p.ID = pv.ProductID
                  ORDER BY pv.SalesCount DESC
                  LIMIT :limit";

        // S·ª≠ d·ª•ng prepared statement ƒë·ªÉ tr√°nh SQL injection
        $stmt = $pdo->prepare($query);
        $stmt->bindParam(':limit', $limit, PDO::PARAM_INT);
        $stmt->execute();

        // Ki·ªÉm tra n·∫øu c√≥ d·ªØ li·ªáu tr·∫£ v·ªÅ
        if ($stmt->rowCount() > 0) {
            return $stmt->fetchAll(PDO::FETCH_ASSOC); // Tr·∫£ v·ªÅ d·ªØ li·ªáu s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t
        }

        return []; // Tr·∫£ v·ªÅ m·∫£ng r·ªóng n·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m b√°n ch·∫°y
    }

    public function getProductsByPriceLimit($priceLimit = 300000)
    {
        global $pdo;
        // Chu·∫©n b·ªã c√¢u truy v·∫•n SQL ƒë·ªÉ l·∫•y c√°c s·∫£n ph·∫©m c√≥ VariantPrice < 300,000
        $query = "SELECT p.ID, p.Name, p.BasePrice, pv.VariantName, pv.VariantPrice, p.ThumbnailImage, pv.SalesCount
              FROM products p
              JOIN product_variants pv ON p.ID = pv.ProductID
              WHERE pv.VariantPrice < :priceLimit
              ORDER BY pv.VariantPrice ASC";  // S·∫Øp x·∫øp s·∫£n ph·∫©m theo gi√° tƒÉng d·∫ßn

        // S·ª≠ d·ª•ng prepared statement ƒë·ªÉ tr√°nh SQL injection
        $stmt = $pdo->prepare($query);
        $stmt->bindParam(':priceLimit', $priceLimit, PDO::PARAM_INT);
        $stmt->execute();

        // Ki·ªÉm tra n·∫øu c√≥ d·ªØ li·ªáu tr·∫£ v·ªÅ
        if ($stmt->rowCount() > 0) {
            return $stmt->fetchAll(PDO::FETCH_ASSOC); // Tr·∫£ v·ªÅ d·ªØ li·ªáu s·∫£n ph·∫©m c√≥ gi√° d∆∞·ªõi 300,000
        }

        return []; // Tr·∫£ v·ªÅ m·∫£ng r·ªóng n·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m n√†o th·ªèa m√£n ƒëi·ªÅu ki·ªán
    }


    public function findById($id)
    {
        global $pdo;

        $query = "SELECT  
                p.ID,  
                p.Name,   
                p.Description,  
                p.BasePrice, 
                p.CategoryID,
                pv.VariantName, 
                pv.VariantPrice, 
                p.ThumbnailImage, 
                pv.StockQuantity,  -- ƒê·∫£m b·∫£o l·∫•y d·ªØ li·ªáu t·ªìn kho
                pv.SalesCount       -- ƒê·∫£m b·∫£o l·∫•y d·ªØ li·ªáu ƒë√£ b√°n
              FROM products p
              LEFT JOIN product_variants pv ON p.ID = pv.ProductID
              WHERE p.ID = :id
              LIMIT 1";

        $stmt = $pdo->prepare($query);
        $stmt->bindParam(':id', $id, PDO::PARAM_INT);
        $stmt->execute();

        return $stmt->fetch(PDO::FETCH_ASSOC); // Tr·∫£ v·ªÅ m·ªôt m·∫£ng d·ªØ li·ªáu
    }

    public function getProductsBySameIsDefault($productId)
    {
        global $pdo;

        // L·∫•y gi√° tr·ªã `is_default` c·ªßa s·∫£n ph·∫©m hi·ªán t·∫°i
        $query = "SELECT is_default FROM product_variants WHERE ProductID = :productId LIMIT 1";
        $stmt = $pdo->prepare($query);
        $stmt->bindParam(':productId', $productId, PDO::PARAM_INT);
        $stmt->execute();
        $result = $stmt->fetch(PDO::FETCH_ASSOC);

        if (!$result) {
            return []; // Tr·∫£ v·ªÅ m·∫£ng r·ªóng n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu
        }

        $isDefaultValue = $result['is_default'];

        // L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m c√≥ c√πng `is_default`
        $query = "SELECT 
                p.ID, 
                p.Name, 
                p.BasePrice, 
                pv.VariantPrice, 
                pv.ImageURL, 
                pv.StockQuantity, 
                pv.SalesCount 
              FROM products p
              JOIN product_variants pv ON p.ID = pv.ProductID
              WHERE pv.is_default = :isDefault
              GROUP BY p.ID";

        $stmt = $pdo->prepare($query);
        $stmt->bindParam(':isDefault', $isDefaultValue, PDO::PARAM_INT);
        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_ASSOC); // Tr·∫£ v·ªÅ danh s√°ch s·∫£n ph·∫©m
    }

    public function getProductImagesByProductId($productId)
    {
        global $pdo;

        $query = "SELECT pv.ImageURL, pv.VariantName, pv.VariantPrice, pv.StockQuantity, pv.SalesCount 
                  FROM product_variants pv
                  WHERE pv.ProductID = :productId";

        $stmt = $pdo->prepare($query);
        $stmt->bindParam(':productId', $productId, PDO::PARAM_INT);
        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_ASSOC); // Tr·∫£ v·ªÅ danh s√°ch ·∫£nh v√† th√¥ng tin s·∫£n ph·∫©m
    }

    public function filterProducts($category = null, $priceRange = null, $sort = null)
    {
        global $pdo;

        // B·∫Øt ƒë·∫ßu c√¢u truy v·∫•n SQL
        $query = "SELECT p.ID, p.Name, p.BasePrice, p.ThumbnailImage, pv.VariantPrice, pv.StockQuantity 
              FROM products p
              LEFT JOIN product_variants pv ON p.ID = pv.ProductID 
              WHERE 1=1"; // Lu√¥n ƒë√∫ng ƒë·ªÉ d·ªÖ d√†ng th√™m ƒëi·ªÅu ki·ªán l·ªçc

        // M·∫£ng ƒë·ªÉ l∆∞u c√°c tham s·ªë r√†ng bu·ªôc
        $params = [];

        // üîπ L·ªçc theo danh m·ª•c (n·∫øu c√≥)
        if (!empty($category)) {
            $query .= " AND p.CategoryID = :category";
            $params[':category'] = $category;
        }

        // üîπ L·ªçc theo kho·∫£ng gi√° (n·∫øu c√≥)
        if (!empty($priceRange)) {
            $rangeParts = explode('-', $priceRange);
            if (count($rangeParts) == 2) {
                $query .= " AND pv.VariantPrice BETWEEN :minPrice AND :maxPrice";
                $params[':minPrice'] = $rangeParts[0];
                $params[':maxPrice'] = $rangeParts[1];
            } elseif ($rangeParts[0] !== '') {
                $query .= " AND pv.VariantPrice >= :minPrice";
                $params[':minPrice'] = $rangeParts[0];
            }
        }

        // üîπ S·∫Øp x·∫øp s·∫£n ph·∫©m (n·∫øu c√≥)
        if ($sort === 'asc') {
            $query .= " ORDER BY pv.VariantPrice ASC";
        } elseif ($sort === 'desc') {
            $query .= " ORDER BY pv.VariantPrice DESC";
        }

        // Chu·∫©n b·ªã c√¢u truy v·∫•n v√† th·ª±c thi
        $stmt = $pdo->prepare($query);
        foreach ($params as $key => $value) {
            $stmt->bindValue($key, $value, PDO::PARAM_INT);
        }
        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    public function getProductsPaginated($limit, $offset)
    {
        global $pdo;

        // Truy v·∫•n l·∫•y danh s√°ch s·∫£n ph·∫©m v·ªõi ph√¢n trang
        $query = "SELECT p.ID, p.Name, p.Description, p.BasePrice, p.CategoryID, 
                     pv.VariantName, pv.VariantPrice, p.ThumbnailImage, pv.StockQuantity
              FROM products p
              LEFT JOIN product_variants pv ON p.ID = pv.ProductID
              LIMIT :limit OFFSET :offset";

        $stmt = $pdo->prepare($query);
        $stmt->bindParam(':limit', $limit, PDO::PARAM_INT);
        $stmt->bindParam(':offset', $offset, PDO::PARAM_INT);
        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    // H√†m ƒë·∫øm t·ªïng s·ªë s·∫£n ph·∫©m
    public function getTotalProducts()
    {
        global $pdo;
        $query = "SELECT COUNT(*) as total FROM products";
        $stmt = $pdo->query($query);
        return $stmt->fetch(PDO::FETCH_ASSOC)['total'];
    }

    public function searchProducts($keyword)
    {
        global $pdo;
        $query = "SELECT p.ID, p.Name, p.ThumbnailImage, pv.VariantPrice 
              FROM products p 
              LEFT JOIN product_variants pv ON p.ID = pv.ProductID 
              WHERE p.Name LIKE :keyword";

        $stmt = $pdo->prepare($query);
        $searchTerm = "%$keyword%";
        $stmt->bindParam(':keyword', $searchTerm, PDO::PARAM_STR);
        $stmt->execute();

        $results = $stmt->fetchAll(PDO::FETCH_ASSOC);

        if (empty($results)) {
            return [];
        }

        return $results;
    }



}
?>
<?php
require_once __DIR__ . '/../Repository/ProductRepository.php';  // ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n ch√≠nh x√°c
require_once __DIR__ . '/../models/ProductModel.php'; // ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n ch√≠nh x√°c

class ProductController
{
    private $productRepository;

    // ‚úÖ Constructor ƒë·ªÉ kh·ªüi t·∫°o `ProductRepository` m·ªôt l·∫ßn duy nh·∫•t
    public function __construct()
    {
        $this->productRepository = new ProductRepository();
    }


    // Ph∆∞∆°ng th·ª©c l·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m
    public function getAllProduct()
    {
        // Kh·ªüi t·∫°o repository
        $productRepository = new ProductRepository();

        // L·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m t·ª´ repository
        $productsData = $productRepository->getAllProducts();

        // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m n√†o trong c∆° s·ªü d·ªØ li·ªáu
        if (empty($productsData)) {
            return [];  // N·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m, tr·∫£ v·ªÅ m·∫£ng r·ªóng
        }

        // Duy·ªát qua d·ªØ li·ªáu v√† ch·ªâ l·∫•y c√°c th√¥ng tin c·∫ßn thi·∫øt: h√¨nh ·∫£nh, t√™n s·∫£n ph·∫©m v√† gi√°
        $productList = [];
        foreach ($productsData as $data) {
            // Kh·ªüi t·∫°o ProductModel
            $product = new ProductModel();
            $product->setId($data['ID']);
            $product->setName($data['Name']);
            $product->setImageURL($data['ThumbnailImage']);
            $product->setBasePrice($data['BasePrice']);
            $product->setVariantPrice($data['VariantPrice']); // D√πng gi√° bi·∫øn th·ªÉ n·∫øu c√≥

            // Th√™m v√†o m·∫£ng s·∫£n ph·∫©m
            $productList[] = $product;
        }

        // Tr·∫£ v·ªÅ d·ªØ li·ªáu s·∫£n ph·∫©m
        return $productList;
    }

    // Ph∆∞∆°ng th·ª©c l·∫•y 5 s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t
    public function getTopSellingProducts()
    {
        // Kh·ªüi t·∫°o repository
        $productRepository = new ProductRepository();

        // L·∫•y 5 s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t
        $topProductsData = $productRepository->getTopSellingProducts(7);

        // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m b√°n ch·∫°y
        if (empty($topProductsData)) {
            return [];  // Tr·∫£ v·ªÅ m·∫£ng r·ªóng n·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m b√°n ch·∫°y
        }

        // Duy·ªát qua d·ªØ li·ªáu v√† ch·ªâ l·∫•y c√°c th√¥ng tin c·∫ßn thi·∫øt: h√¨nh ·∫£nh, t√™n s·∫£n ph·∫©m, gi√° v√† s·ªë l∆∞·ª£t b√°n
        $topProductList = [];
        foreach ($topProductsData as $data) {
            // Kh·ªüi t·∫°o ProductModel
            $product = new ProductModel();
            $product->setId($data['ID']);
            $product->setName($data['Name']);
            $product->setImageURL($data['ThumbnailImage']);
            $product->setBasePrice($data['BasePrice']);
            $product->setVariantPrice($data['VariantPrice']);
            $product->setSalesCount($data['SalesCount']); // S·ªë l∆∞·ª£t b√°n c·ªßa s·∫£n ph·∫©m

            // Th√™m v√†o m·∫£ng s·∫£n ph·∫©m b√°n ch·∫°y
            $topProductList[] = $product;
        }

        // Tr·∫£ v·ªÅ danh s√°ch s·∫£n ph·∫©m b√°n ch·∫°y
        return $topProductList;
    }

    public function getProductsByPriceLimit()
    {
        // Kh·ªüi t·∫°o repository
        $productRepository = new ProductRepository();

        // L·∫•y c√°c s·∫£n ph·∫©m c√≥ VariantPrice < 300,000
        $affordableProductsData = $productRepository->getProductsByPriceLimit(300000);  // Thay ƒë·ªïi gi√° tr·ªã n·∫øu c·∫ßn

        // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m n√†o
        if (empty($affordableProductsData)) {
            return [];  // Tr·∫£ v·ªÅ m·∫£ng r·ªóng n·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m ph√π h·ª£p
        }

        // Duy·ªát qua d·ªØ li·ªáu v√† ch·ªâ l·∫•y c√°c th√¥ng tin c·∫ßn thi·∫øt
        $affordableProductList = [];
        foreach ($affordableProductsData as $data) {
            // Kh·ªüi t·∫°o ProductModel
            $product = new ProductModel();
            $product->setId($data['ID']);
            $product->setName($data['Name']);
            $product->setImageURL($data['ThumbnailImage']);
            $product->setBasePrice($data['BasePrice']);
            $product->setVariantPrice($data['VariantPrice']);
            $product->setSalesCount($data['SalesCount']); // N·∫øu c·∫ßn

            // Th√™m v√†o m·∫£ng s·∫£n ph·∫©m c√≥ gi√° d∆∞·ªõi 300,000
            $affordableProductList[] = $product;
        }

        // Tr·∫£ v·ªÅ danh s√°ch s·∫£n ph·∫©m
        return $affordableProductList;
    }


    public function getProductById($id)
    {
        $productRepository = new ProductRepository();
        $data = $productRepository->findById($id);

        if (!$data) {
            return null; // Tr·∫£ v·ªÅ null n·∫øu kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m
        }

        // T·∫°o ProductModel t·ª´ d·ªØ li·ªáu database
        $product = new ProductModel();
        $product->setId($data['ID']);
        $product->setName($data['Name']);
        $product->setDescription($data['Description']);
        $product->setBasePrice($data['BasePrice']);
        $product->setCategoryId($data['CategoryID']);
        $product->setVariantName($data['VariantName']);
        $product->setVariantPrice($data['VariantPrice']);
        $product->setImageURL($data['ThumbnailImage']);
        $product->setStockQuantity($data['StockQuantity']); // L·∫•y t·ªìn kho
        $product->setSalesCount($data['SalesCount']); // L·∫•y s·ªë l∆∞·ª£ng ƒë√£ b√°n

        return $product;
    }

    // üìå 3Ô∏è‚É£ L·∫•y danh s√°ch h√¨nh ·∫£nh c·ªßa t·∫•t c·∫£ s·∫£n ph·∫©m c√≥ chung `is_default`

    public function getProductsBySameIsDefault($productId)
    {
        return $this->productRepository->getProductsBySameIsDefault($productId);
    }

    public function getProductImagesByProductId($productId)
    {
        $productRepository = new ProductRepository();
        return $productRepository->getProductImagesByProductId($productId);
    }


    public function filterProducts($category = null, $priceRange = null, $sort = null)
    {
        // Kh·ªüi t·∫°o ProductRepository ƒë·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ database
        $productRepository = new ProductRepository();

        // G·ªçi h√†m l·ªçc s·∫£n ph·∫©m trong Repository
        $filteredProductsData = $productRepository->filterProducts($category, $priceRange, $sort);

        // N·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m, tr·∫£ v·ªÅ m·∫£ng r·ªóng
        if (empty($filteredProductsData)) {
            return [];
        }

        // Chuy·ªÉn d·ªØ li·ªáu th√†nh danh s√°ch ProductModel
        $filteredProducts = [];
        foreach ($filteredProductsData as $data) {
            $product = new ProductModel();
            $product->setId($data['ID']);
            $product->setName($data['Name']);
            $product->setImageURL($data['ThumbnailImage']);
            $product->setBasePrice($data['BasePrice']);
            $product->setVariantPrice($data['VariantPrice']);
            $product->setStockQuantity($data['StockQuantity']);

            $filteredProducts[] = $product;
        }

        return $filteredProducts;
    }

    public function getPaginatedProducts($page, $limit)
    {
        $productRepository = new ProductRepository();

        // T√≠nh to√°n offset
        $offset = ($page - 1) * $limit;

        // L·∫•y danh s√°ch s·∫£n ph·∫©m
        $productsData = $productRepository->getProductsPaginated($limit, $offset);

        if (empty($productsData)) {
            return [];
        }

        // T·∫°o danh s√°ch s·∫£n ph·∫©m d∆∞·ªõi d·∫°ng ƒë·ªëi t∆∞·ª£ng ProductModel
        $productList = [];
        foreach ($productsData as $data) {
            $product = new ProductModel();
            $product->setId($data['ID']);
            $product->setName($data['Name']);
            $product->setImageURL($data['ThumbnailImage']);
            $product->setBasePrice($data['BasePrice']);
            $product->setVariantPrice($data['VariantPrice']);
            $productList[] = $product;
        }

        return $productList;
    }

    // H√†m l·∫•y t·ªïng s·ªë trang
    public function getTotalPages($limit)
    {
        $productRepository = new ProductRepository();
        $totalProducts = $productRepository->getTotalProducts();
        return ceil($totalProducts / $limit);
    }

    //t√¨m ki·∫øm
    public function searchProducts($keyword)
    {
        $productRepository = new ProductRepository();
        return $productRepository->searchProducts($keyword);
    }

}
?>